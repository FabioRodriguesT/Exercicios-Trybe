
// InstruÃ§Ãµes para a realizaÃ§Ã£o dos exercÃ­cios
// Nos exercÃ­cios a seguir, vocÃª trabalharÃ¡ com uma estrutura de dados representando uma lista de livros contendo informaÃ§Ãµes como nome do livro, gÃªnero, pessoa autora do livro e data de lanÃ§amento.

// Em cada exercÃ­cio, serÃ¡ pedido que vocÃª encontre ou produza alguma informaÃ§Ã£o a respeito dessa lista utilizando as funÃ§Ãµes que vocÃª aprendeu hoje. Todos os exercÃ­cios contÃªm um cÃ³digo-base. VocÃª deverÃ¡ copiar esse cÃ³digo e salvÃ¡-lo em um arquivo nomeado conforme o nÃºmero do exercÃ­cio, completando a funÃ§Ã£o vazia.

// Por exemplo, o exercÃ­cio 1 deve ser salvo no arquivo exercise1.js, e assim por diante.

// ðŸš€ Organizando uma biblioteca
// Estes exercÃ­cios praticam os conceitos de Higher Order Functions associados a outros temas de fundamentos jÃ¡ vistos, como arrow functions, template literals e objetos. Essa mistura de conceitos Ã© muito importante para o seu aprendizado, entÃ£o use tudo o que sabe para resolver os exercÃ­cios!

// Utilize o seguinte cÃ³digo como template para realizar os exercÃ­cios:

// Adicione o cÃ³digo do exercÃ­cio aqui:

const books = require('./books');

// Encontre o nome da primeira pessoa autora do livro nascida no ano de 1947.

const findAuthorBorn = (age) => {
  const author = books.find(element => element.author.birthYear === age);
  return `O autor que nasceu nesse ano Ã© ${author.author.name}.`;
}

console.log(findAuthorBorn(1947));

// Retorne o nome do livro com menor nÃºmero de caracteres (menor nome).

const leastCharacterBookName = () => {
  let book = books[0].name;

  books.forEach(element => {
    if (element.name.length < book.length) {
      book = element.name;
    }
  });
  return `O livro com o menor nome Ã© ${book}.`;
}

console.log(leastCharacterBookName());

// Encontre o primeiro livro cujo nome possua 26 caracteres.

const findBook = (number) => {
  const book = books.find(element => element.name.length === number);
  return `O livro cujo o nome possui ${26} letras Ã© ${book.name}.`
}

console.log(findBook(26));

//  FaÃ§a uma funÃ§Ã£o que retorne true se todas as pessoas autoras tiverem nascido no sÃ©culo XX, ou false, caso contrÃ¡rio.

function everyoneWasBornOnSecXX() {
  const result = books.every((element) => element.author.birthYear > 1901 && element.author.birthYear < 2001);

  return `Todos os autoraes nasceram no sÃ©culo XX: ${result}.`;
}
console.log(everyoneWasBornOnSecXX());

// FaÃ§a uma funÃ§Ã£o que retorne true, se algum livro foi lanÃ§ado na dÃ©cada de 80, e false, caso contrÃ¡rio.


const someBookWasReleaseOnThe80s = () => {
  // escreva seu cÃ³digo aqui
  const result = books.some((element) => element.releaseYear > 1979 && element.releaseYear < 1990);
  return result;
}

console.log(someBookWasReleaseOnThe80s());

// FaÃ§a uma funÃ§Ã£o que retorne true, caso nenhuma pessoa autora tenha nascido no mesmo ano, e false, caso contrÃ¡rio.

const expectedResult = false;

const authorUnique = () => {
  return books.every((book) =>
    !books.some((bookSome) =>
      (bookSome.author.birthYear === book.author.birthYear)
      && (bookSome.author.name !== book.author.name)));
}

console.log(authorUnique());